version: '3'

services:
  awesome1:
   image: awesome
   ports:
     - 0:5000
   environment:
     - SERVICE_PORTS=5000
   deploy:
     replicas: 2
     update_config:
       parallelism: 5
       delay: 10s
     restart_policy:
       condition: on-failure
       max_attempts: 3
       window: 120s
   networks:
     - web

  proxy1:
    image: dockercloud/haproxy
    depends_on:
      - awesome1
    environment:
      - BALANCE=leastconn
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 5000:80
    networks:
      - web
    deploy:
      placement:
        constraints: [node.role == manager]

  awesome2:
   image: awesome
   ports:
     - 0:5000
   environment:
     - SERVICE_PORTS=5000
   deploy:
     replicas: 2
     update_config:
       parallelism: 5
       delay: 10s
     restart_policy:
       condition: on-failure
       max_attempts: 3
       window: 120s
   networks:
     - web

  proxy2:
    image: dockercloud/haproxy
    depends_on:
      - awesome2
    environment:
      - BALANCE=leastconn
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 6000:80
    networks:
      - web
    deploy:
      placement:
        constraints: [node.role == manager]

  awesome3:
   image: awesome
   ports:
     - 0:5000
   environment:
     - SERVICE_PORTS=5000
   deploy:
     replicas: 2
     update_config:
       parallelism: 5
       delay: 10s
     restart_policy:
       condition: on-failure
       max_attempts: 3
       window: 120s
   networks:
     - web

  proxy3:
    image: dockercloud/haproxy
    depends_on:
      - awesome3
    environment:
      - BALANCE=leastconn
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 7000:80
    networks:
      - web
    deploy:
      placement:
        constraints: [node.role == manager]

  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - "8000:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]
    networks:
      - web
networks:
  web:
    driver: overlay
